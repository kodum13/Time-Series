library(astsa)
library(tseries)
library(forecast)

# Plots for the original time series Sales
plot.ts(sales, main="Sales Time Series")

adf.test(sales)

# Plots for the first differenced time series Sales
diff_sales = diff(sales)
plot.ts(diff_sales, main="Diff. Sales Time Series")

adf.test(diff_sales)

# Plots for the second differenced time series Sales
diff_2_sales = diff(diff(sales))
plot.ts(diff_2_sales, main="Second Diff. Sales Time Series")
acf(diff_2_sales, main="Second diff. ACF")
pacf(diff_2_sales, main="Second diff. PACF")

adf.test(diff_2_sales)

auto.arima(sales)
# Test model (1,1,1) and model (0,1,1)
model_1 <- sarima(sales,1,1,1)

model_2 <- sarima(sales,0,1,1, details=FALSE)

model_3 <- sarima(sales,1,2,1, details=FALSE)

model_4 <- sarima(sales,0,2,1, details=FALSE)

model_1$AIC
model_1$BIC
model_2$AIC
model_2$BIC
model_3$AIC
model_3$BIC
model_4$AIC
model_4$BIC
# Lead
diff_lead = diff(lead)

# CCF and lag plots 
ccf(diff_sales,diff_lead,lag.max=10, main="Diff. Sales and Diff. Lead CCF")
lag2.plot(diff_lead,diff_sales, max.lag=5)

# Regression model
lead_3 <- diff(lead,lag=3)
reg <-ts.intersect(diff_sales,lead_3,dframe=TRUE)
summary(fit<-lm(diff_sales~lead_3,data=reg,na.action=NULL))

resid <- fit$residuals

# Unemployment Data
plot.ts(unemp, main="Unemployment Data Time Series")
acf2(unemp)
adf.test(unemp)

# Difference order 1
par(mfrow=c(1,1))
diff_unemp = diff(unemp)
plot(diff_unemp, main="Diff. Unemployment Time Series")
adf.test(diff_unemp)
acf2(diff_unemp)

# Seasonal difference at 12
par(mfrow=c(1,1))
s_diff <- diff(diff_unemp,12)
plot(s_diff, main="Seasonal Diff. Unemployment Time Series")
acf2(s_diff)

# Compare models, lowest AIC and BIC
s1 <- sarima(unemp,4,1,0,0,1,1,12)
s2 <- sarima(unemp,2,1,0,0,1,1,12)
s3 <- sarima(unemp,2,1,2,0,1,1,12)
s4 <- sarima(unemp,1,1,1,0,1,1,12)

#Predict 12 months ahead
sarima.for(unemp,12,2,1,0,0,1,1,12)

#frequencies you are estimating the spectrum at depend on the sampling rate

x1 = 2*cos(2*pi*1:128*6/100) + 3*sin(2*pi*1:128*6/100)
x2 = 4*cos(2*pi*1:128*10/100) + 5*sin(2*pi*1:128*10/100)
x3 = 6*cos(2*pi*1:128*40/100) + 7*sin(2*pi*1:128*40/100)
x=x1+x2+x3

y1 = 2*cos(2*pi*1:100*6/100) + 3*sin(2*pi*1:100*6/100)
y2 = 4*cos(2*pi*1:100*10/100) + 5*sin(2*pi*1:100*10/100)
y3 = 6*cos(2*pi*1:100*40/100) + 7*sin(2*pi*1:100*40/100)
y=y1+y2+y3

par(mfrow=c(2,2))
plot.ts(x1, ylim=c(-10,10), main=expression(omega==6/100~~~A^2==13))
plot.ts(x2, ylim=c(-10,10), main=expression(omega==10/100~~~A^2==41))
plot.ts(x3, ylim=c(-10,10), main=expression(omega==40/100~~~A^2==85))
plot.ts(x, ylim=c(-16,16),main="sum")

plot.ts(y1, ylim=c(-10,10), main=expression(omega==6/100~~~A^2==13))
plot.ts(y2, ylim=c(-10,10), main=expression(omega==10/100~~~A^2==41))
plot.ts(y3, ylim=c(-10,10), main=expression(omega==40/100~~~A^2==85))
plot.ts(y, ylim=c(-16,16),main="sum")

P = Mod(2*fft(x)/128)^2;
Fr = 0:127/128;
plot(Fr,P, type="o", xlab="frequency",ylab="scaled periodogram", main="n=128")

P2 = Mod(2*fft(y)/100)^2;
Fr2 = 0:99/100;
plot(Fr2,P2, type="o", xlab="frequency",ylab="scaled periodogram", main="100")
